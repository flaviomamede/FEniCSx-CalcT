#!/usr/bin/env python3
"""
BARRAGEM FEniCSx - VERS√ÉO FINAL OTIMIZADA
Usa an√°lise JSON para execu√ß√£o assertiva apenas no PRIMEIRO BLOCO DE TEMPO

MELHORIAS IMPLEMENTADAS:
- Executa APENAS primeiro bloco de tempo
- L√≥gica assertiva usando elementos/n√≥s ativos do JSON
- Formula√ß√£o variacional otimizada por bloco
- Mapeamento preciso de Physical Groups
"""

import dolfinx as fem
from dolfinx import mesh, fem, io
from dolfinx.fem import Function, FunctionSpace, Constant, locate_dofs_topological
from dolfinx.fem.petsc import LinearProblem, NonlinearProblem
from dolfinx.nls.petsc import NewtonSolver
from mpi4py import MPI
import numpy as np
import ufl
from ufl import grad, dot, dx, ds, TestFunction, TrialFunction, lhs, rhs, TestFunctions, split
import yaml
import json
import os
import sys
import petsc4py
petsc4py.init()
from petsc4py import PETSc
import datetime

class TeeOutput:
    """Classe para redirecionar sa√≠da para terminal e arquivo simultaneamente"""
    def __init__(self, filename):
        self.terminal = sys.stdout
        self.log_file = open(filename, 'w', encoding='utf-8')
        # Escrever cabe√ßalho
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        header = f"# LOG DE EXECU√á√ÉO - {timestamp}\n\n"
        self.log_file.write(header)
        self.log_file.flush()
    
    def write(self, message):
        self.terminal.write(message)
        self.log_file.write(message)
        self.log_file.flush()
    
    def flush(self):
        self.terminal.flush()
        self.log_file.flush()
    
    def close(self):
        self.log_file.close()
        sys.stdout = self.terminal

class BarragemStageWiseCorreto:
    """Implementa√ß√£o FINAL usando an√°lise JSON - APENAS PRIMEIRO BLOCO"""
    
    def __init__(self, config_file, json_file):
        self.comm = MPI.COMM_WORLD
        self.rank = self.comm.Get_rank()
        
        # Carregar configura√ß√£o YAML
        with open(config_file, 'r', encoding='utf-8') as f:
            self.config = yaml.safe_load(f)
        
        # Carregar an√°lise JSON
        with open(json_file, 'r', encoding='utf-8') as f:
            self.analysis = json.load(f)
        
        # Configura√ß√µes
        self.theta = self.config['general']['theta']
        self.output_dir = self.config['general']['output_dir']
        
        # Temperatura inicial
        self.temp_inicial = 20.0
        if 'initial_conditions' in self.config and 'temperature' in self.config['initial_conditions']:
            self.temp_inicial = self.config['initial_conditions']['temperature']
        elif 'camadas_material' in self.config and self.config['camadas_material']:
            self.temp_inicial = self.config['camadas_material'][0]['temperatura_inicial']
        
        # Extrair informa√ß√µes da an√°lise JSON
        self.time_vector = self.analysis['vetor_tempo']
        self.time_blocks = self.analysis['blocos_tempo']
        self.block_results = self.analysis['analise_resultados']
        self.mappings = self.analysis['info_geral']['mapeamentos']
        
        # NOVO: Extrair info do plano de simula√ß√£o para l√≥gica assertiva
        self.plano_simulacao = self.analysis['analise_resultados']
        
        if self.rank == 0:
            print("üèóÔ∏è  BARRAGEM STAGE-WISE - VERS√ÉO FINAL OTIMIZADA")
            print("="*60)
            print(f"üå°Ô∏è  Temperatura inicial: {self.temp_inicial}¬∞C")
            print(f"üìä Blocos de tempo: {len(self.time_blocks)}")
            print(f"üéØ EXECUTANDO APENAS PRIMEIRO BLOCO DE TEMPO")
            print(f"üìÅ Malha: {self.analysis['info_geral']['xdmf_file']}")
    
    def load_mesh_and_discover_tags(self):
        """Carrega malha usando informa√ß√µes do JSON"""
        mesh_file = self.config['general']['mesh_file']
        
        with io.XDMFFile(self.comm, f"{mesh_file}", "r") as xdmf:
            self.mesh = xdmf.read_mesh(name="malha")
            
            # CORRE√á√ÉO: Criar entidades de facetas e conectividade ANTES de ler as tags
            self.mesh.topology.create_entities(1)
            self.mesh.topology.create_connectivity(1, 2)  # facetas -> c√©lulas
            
            self.cell_tags = xdmf.read_meshtags(self.mesh, name="malha_cells")
            try:
                self.facet_tags = xdmf.read_meshtags(self.mesh, name="malha_facets")
                if self.rank == 0:
                    print(f"   ‚úÖ Facet tags carregadas do XDMF: {np.unique(self.facet_tags.values)}")
            except Exception as e:
                if self.rank == 0:
                    print(f"   ‚ö†Ô∏è  Falha ao carregar facet tags do XDMF: {e}")
                    print(f"   üîß Criando facet tags vazias (todos os valores = 0)")
                tdim = self.mesh.topology.dim
                fdim = tdim - 1
                self.mesh.topology.create_connectivity(fdim, tdim)
                num_facets = self.mesh.topology.index_map(fdim).size_local
                facet_indices = np.arange(num_facets, dtype=np.int32)
                facet_markers = np.zeros(num_facets, dtype=np.int32)
                self.facet_tags = mesh.meshtags(self.mesh, fdim, facet_indices, facet_markers)
        
        if self.rank == 0:
            print(f"üìÅ Malha carregada: {mesh_file}")
            print(f"üè∑Ô∏è  Surfaces: {list(self.mappings['physical_surfaces'].values())}")
            print(f"üè∑Ô∏è  Lines: {list(self.mappings['physical_lines'].values())}")
    
    def setup_materials_and_schedule(self):
        """Configura materiais usando informa√ß√µes do YAML"""
        self.materials = {}
        
        for mat in self.config['materiais']:
            nome = mat['nome']
            hgen = mat.get('hgen', {})
            self.materials[nome] = {
                'densidade': mat['densidade'],
                'condutividade': mat['condutividade_termica'],
                'calor_especifico': mat['calor_especifico'],
                'temp_lancamento': self.temp_inicial,
                'gera_calor': hgen.get('gera_calor', False),
                'dTadinfty': hgen.get('par_gera_calor', {}).get('dTadinfty', 30.0),
                'a_dias': hgen.get('par_gera_calor', {}).get('a_dias', 1.5),
                'expoente': hgen.get('par_gera_calor', {}).get('expoente', 2.0),
                'EaR': hgen.get('EaR', 4000.0),
                'Tref': hgen.get('Tref', 20.0)
            }
        
        # Verificar se h√° materiais exot√©rmicos
        self.has_exothermic = any(mat['gera_calor'] for mat in self.materials.values())
        
        if self.rank == 0:
            print(f"‚úÖ Materiais configurados: {list(self.materials.keys())}")
            if self.has_exothermic:
                print(f"üî• Sistema exot√©rmico detectado!")
    
    def setup_function_spaces(self):
        """Define espa√ßos de fun√ß√£o"""
        if self.has_exothermic:
            # Sistema exot√©rmico: espa√ßos separados para Tp e teq
            self.V = fem.functionspace(self.mesh, ("Lagrange", 1))
            
            # Fun√ß√µes para temperatura
            self.Tp = Function(self.V)          # Solu√ß√£o atual
            self.Tp_n = Function(self.V)        # Solu√ß√£o anterior
            self.u_Tp = TrialFunction(self.V)   # Inc√≥gnita (ESTA ERA A PE√áA QUE FALTAVA!)
            self.v_Tp = TestFunction(self.V)    # Fun√ß√£o de teste
            
            # Fun√ß√µes para tempo equivalente
            self.teq = Function(self.V)
            self.teq_n = Function(self.V)
            self.v_teq = TestFunction(self.V)
            
            # Fun√ß√£o para gera√ß√£o de calor
            self.Q_heat = Function(self.V)
            
            if self.rank == 0:
                print(f"‚úÖ Espa√ßos de fun√ß√£o configurados (sistema exot√©rmico: Tp + teq + Q)")
        else:
            # Sistema simples: apenas temperatura
            self.V = fem.functionspace(self.mesh, ("Lagrange", 1))
            self.T = Function(self.V)
            self.T_n = Function(self.V)
            self.u = TrialFunction(self.V)
            self.v = TestFunction(self.V)
            
            if self.rank == 0:
                print(f"‚úÖ Espa√ßos de fun√ß√£o configurados (sistema simples: apenas T)")
    
    def encontrar_bloco_para_tempo_atual(self, current_time, plano_simulacao):
        """FUN√á√ÉO ASSERTIVA: Encontra bloco ativo baseado no tempo atual"""
        for bloco_key, bloco_info in plano_simulacao.items():
            info_bloco = bloco_info['info_bloco']
            if info_bloco['inicio'] <= current_time <= info_bloco['fim']:
                return bloco_info
        return None
    
    def Q_function(self, teq_val, mat_props):
        """Fun√ß√£o Hill para gera√ß√£o de calor (baseada no exemplo que funciona)"""
        rho = mat_props['densidade']
        ce = mat_props['calor_especifico']
        dTadinfty = mat_props['dTadinfty']
        a_dias = mat_props['a_dias']
        expoente = mat_props['expoente']
        
        # Converter a_dias para segundos
        a_sec = a_dias * 24 * 3600
        
        # Fun√ß√£o Hill - corrigida para match com exemplo que funciona
        # Q(teq) = rho * ce * dTadinfty * teq^c / (a^c + teq^c)
        return rho * ce * (dTadinfty * teq_val**expoente / (a_sec**expoente + teq_val**expoente))
    
    def dQ_dteq(self, teq_val, mat_props):
        """Derivada da fun√ß√£o Hill em rela√ß√£o ao tempo equivalente"""
        rho = mat_props['densidade']
        ce = mat_props['calor_especifico']
        dTadinfty = mat_props['dTadinfty']
        a_dias = mat_props['a_dias']
        expoente = mat_props['expoente']
        
        # Converter a_dias para segundos
        a_sec = a_dias * 24 * 3600
        
        # Derivada da fun√ß√£o Hill
        term = dTadinfty * expoente * teq_val**(expoente-1) * a_sec**expoente / (a_sec**expoente + teq_val**expoente)**2
        return rho * ce * term
    
    def arrhenius_factor(self, Tp_val, mat_props):
        """Fator de Arrhenius para evolu√ß√£o do tempo equivalente"""
        EaR = mat_props['EaR']
        Tref = mat_props['Tref']
        
        # Fator de Arrhenius (implementa√ß√£o dos exemplos)
        return ufl.exp(EaR * (1/(Tref + 273.15) - 1/(Tp_val + 273.15)))
    
    def setup_variational_form(self, dt_val, current_time):
        """L√ìGICA ASSERTIVA: Monta forma variacional usando dom√≠nios/contornos ativos do JSON"""
        # Encontrar bloco ativo usando fun√ß√£o assertiva
        info_bloco_atual = self.encontrar_bloco_para_tempo_atual(current_time, self.plano_simulacao)
        
        if not info_bloco_atual:
            if self.rank == 0:
                print(f"   ‚ö†Ô∏è  Nenhum bloco encontrado para t={current_time/3600:.1f}h")
            return None
        
        # Dom√≠nios e contornos ativos (listas j√° prontas do JSON)
        dominios_ativos = info_bloco_atual['physical_groups']['surfaces']
        contornos_ativos = info_bloco_atual['physical_groups']['lines']
        
        if self.rank == 0:
            print(f"   üî• Dom√≠nios ativos: {dominios_ativos}")
            print(f"   üî• Contornos ativos: {contornos_ativos}")
        
        # Constantes temporais
        dt_const = Constant(self.mesh, PETSc.ScalarType(dt_val))
        theta = Constant(self.mesh, PETSc.ScalarType(self.theta))
        
        # Medidas de integra√ß√£o - DEFINIR UMA VEZ
        dx_measure = ufl.Measure("dx", domain=self.mesh, subdomain_data=self.cell_tags)
        ds_measure = ufl.Measure("ds", domain=self.mesh, subdomain_data=self.facet_tags)
        
        if self.has_exothermic:
            # SISTEMA EXOT√âRMICO: Apenas equa√ß√£o da temperatura (vers√£o simplificada)
            # TODO: Implementar tempo equivalente em vers√£o futura
            a = 0
            L = 0
            
            # Obter propriedades do material para este dom√≠nio
            material = list(self.materials.values())[0]  # Simplificado
            
            k = material['condutividade']
            rho = material['densidade']
            cp = material['calor_especifico']
            
            # Constantes
            k_const = Constant(self.mesh, PETSc.ScalarType(k))
            rho_const = Constant(self.mesh, PETSc.ScalarType(rho))
            cp_const = Constant(self.mesh, PETSc.ScalarType(cp))
            
            # Contribui√ß√£o apenas dos dom√≠nios ativos
            for domain_id in dominios_ativos:
                # Apenas equa√ß√£o da temperatura (sem gera√ß√£o de calor por enquanto)
                # Termo temporal
                a += rho_const * cp_const * (self.Tp) / dt_const * self.v_Tp * dx_measure(domain_id)
                # Termo de difus√£o
                a += theta * k_const * dot(grad(self.Tp), grad(self.v_Tp)) * dx_measure(domain_id)
                
                # Lado direito
                L += rho_const * cp_const * self.Tp_n / dt_const * self.v_Tp * dx_measure(domain_id)
                L -= (1 - theta) * k_const * dot(grad(self.Tp_n), grad(self.v_Tp)) * dx_measure(domain_id)
            
            if self.rank == 0:
                print(f"   ‚úÖ Formula√ß√£o exot√©rmica SIMPLIFICADA constru√≠da para {len(dominios_ativos)} dom√≠nios ativos")
            
            return a, L
            
        else:
            # SISTEMA SIMPLES: Apenas temperatura
            a = 0
            L = 0
            
            # Propriedades do material (usar primeiro material como padr√£o)
            material = list(self.materials.values())[0]
            k = material['condutividade']
            rho = material['densidade']
            cp = material['calor_especifico']
            
            # Capacidade t√©rmica
            C = rho * cp
            
            # Constantes
            k_const = Constant(self.mesh, PETSc.ScalarType(k))
            C_const = Constant(self.mesh, PETSc.ScalarType(C))
            
            # Contribui√ß√£o apenas dos dom√≠nios ativos
            for domain_id in dominios_ativos:
                # Termo temporal
                a += (C_const / dt_const) * self.u * self.v * dx_measure(domain_id)
                # Termo de difus√£o
                a += theta * k_const * dot(grad(self.u), grad(self.v)) * dx_measure(domain_id)
                
                # Lado direito
                L += (C_const / dt_const) * self.T_n * self.v * dx_measure(domain_id)
                L -= (1 - theta) * k_const * dot(grad(self.T_n), grad(self.v)) * dx_measure(domain_id)
            
            if self.rank == 0:
                print(f"   ‚úÖ Formula√ß√£o simples constru√≠da para {len(dominios_ativos)} dom√≠nios ativos")
            
            return a, L
    
    def setup_variational_form_with_heat_generation(self, dt_val, current_time):
        """
        CORRIGIDO: Monta a forma variacional para o sistema exot√©rmico.
        A forma √© inicializada como zero e as contribui√ß√µes de todos os dom√≠nios
        ativos s√£o somadas em um √∫nico loop para garantir a montagem correta da matriz.
        """
        # Encontrar bloco ativo usando fun√ß√£o assertiva
        info_bloco_atual = self.encontrar_bloco_para_tempo_atual(current_time, self.plano_simulacao)
        
        if not info_bloco_atual:
            if self.rank == 0:
                print(f"   ‚ö†Ô∏è  Nenhum bloco encontrado para t={current_time/3600:.1f}h")
            return None
        
        # Dom√≠nios ativos (lista j√° pronta do JSON)
        dominios_ativos = info_bloco_atual['physical_groups']['surfaces']
        
        if self.rank == 0:
            print(f"   üî• Formula√ß√£o exot√©rmica com Q para {len(dominios_ativos)} dom√≠nios ativos")
        
        # Constantes temporais
        dt_const = Constant(self.mesh, PETSc.ScalarType(dt_val))
        theta = Constant(self.mesh, PETSc.ScalarType(self.theta))
        
        # Obter propriedades do material
        material = list(self.materials.values())[0]  # Usar primeiro material
        k = material['condutividade']
        rho = material['densidade']
        cp = material['calor_especifico']
        
        # Constantes
        k_const = Constant(self.mesh, PETSc.ScalarType(k))
        rho_const = Constant(self.mesh, PETSc.ScalarType(rho))
        cp_const = Constant(self.mesh, PETSc.ScalarType(cp))
        
        # --- IN√çCIO DA CORRE√á√ÉO ---
        
        # 1. Inicializar as formas como zero ANTES do loop
        a = 0
        L = 0
        
        # 2. Definir a medida de integra√ß√£o uma √∫nica vez
        dx_measure = ufl.Measure("dx", domain=self.mesh, subdomain_data=self.cell_tags)
        
        # 3. Loop sobre TODOS os dom√≠nios ativos para somar suas contribui√ß√µes
        for domain_id in dominios_ativos:
            # Lado esquerdo (bilinear) - contribui√ß√£o do dom√≠nio atual
            a += rho_const * cp_const * (self.u_Tp / dt_const) * self.v_Tp * dx_measure(domain_id)
            a += theta * k_const * ufl.dot(ufl.grad(self.u_Tp), ufl.grad(self.v_Tp)) * dx_measure(domain_id)
            
            # Lado direito (linear) - contribui√ß√£o do dom√≠nio atual
            L += rho_const * cp_const * (self.Tp_n / dt_const) * self.v_Tp * dx_measure(domain_id)
            L -= (1 - theta) * k_const * ufl.dot(ufl.grad(self.Tp_n), ufl.grad(self.v_Tp)) * dx_measure(domain_id)
            L += self.Q_heat * self.v_Tp * dx_measure(domain_id)
        
        # --- FIM DA CORRE√á√ÉO ---
        
        if self.rank == 0:
            print(f"   ‚úÖ Formula√ß√£o exot√©rmica com Q constru√≠da para {len(dominios_ativos)} dom√≠nios")
        
        return a, L
    
    def get_boundary_conditions(self, current_time):
        """
        CORRE√á√ÉO FUNDAMENTAL: Aplica condi√ß√µes de contorno usando n√≥s ativos/inativos do JSON
        para resolver o problema da matriz singular (n√≥ 13 √≥rf√£o)
        """
        try:
            # Encontrar bloco ativo usando fun√ß√£o assertiva
            info_bloco_atual = self.encontrar_bloco_para_tempo_atual(current_time, self.plano_simulacao)
            
            if not info_bloco_atual:
                return self.apply_fallback_boundary_conditions()
            
            # EXTRAIR N√ìS ATIVOS E CONTORNOS DO JSON (NUMERA√á√ÉO XDMF)
            nos_ativos = info_bloco_atual['elementos_nos']['nos_dominio']
            contornos_ativos = info_bloco_atual['physical_groups']['lines']
            
            if self.rank == 0:
                print(f"   üéØ CORRE√á√ÉO: N√≥s ativos: {len(nos_ativos)} de {self.mesh.topology.index_map(0).size_local}")
                print(f"   üéØ CORRE√á√ÉO: Contornos ativos: {contornos_ativos}")
            
            # CALCULAR N√ìS INATIVOS (SEM EQUA√á√ÉO F√çSICA)
            todos_nos = set(range(self.mesh.topology.index_map(0).size_local))
            nos_ativos_set = set(nos_ativos)
            nos_inativos = list(todos_nos - nos_ativos_set)
            
            if self.rank == 0:
                print(f"   üîß CORRE√á√ÉO: N√≥s inativos (√≥rf√£os): {sorted(nos_inativos)}")
            
            # Temperatura de contorno
            T_boundary = 20.0
            if 'camadas_material' in self.config and self.config['camadas_material']:
                T_boundary = self.config['camadas_material'][0]['temperatura_inicial']
            
            bcs = []
            
            # 1. APLICAR DIRICHLET NOS N√ìS INATIVOS (CORRE√á√ÉO PRINCIPAL)
            # Isso resolve o problema da matriz singular fixando os DOFs √≥rf√£os
            for no_inativo in nos_inativos:
                try:
                    dofs = np.array([no_inativo], dtype=np.int32)
                    valor_fixo = T_boundary  # Usar mesma temperatura que os contornos
                    
                    bc = fem.dirichletbc(
                        fem.Constant(self.mesh, float(valor_fixo)),
                        dofs,
                        self.V
                    )
                    bcs.append(bc)
                except Exception as e:
                    if self.rank == 0:
                        print(f"   ‚ö†Ô∏è  Erro ao fixar n√≥ inativo {no_inativo}: {e}")
            
            if self.rank == 0:
                print(f"   ‚úÖ CORRE√á√ÉO: {len([bc for bc in bcs])} n√≥s inativos fixados em T={T_boundary}¬∞C")
            
            # 2. APLICAR DIRICHLET NOS CONTORNOS ATIVOS (L√ìGICA ORIGINAL)
            bcs_contornos = 0
            for boundary_id in contornos_ativos:
                try:
                    # Encontrar facetas que t√™m a tag do contorno atual
                    facet_indices = np.where(self.facet_tags.values == boundary_id)[0]
                    
                    if len(facet_indices) > 0:
                        # Localizar DOFs nessas facetas
                        boundary_dofs = locate_dofs_topological(self.V, self.mesh.topology.dim - 1, facet_indices)
                        
                        if len(boundary_dofs) > 0:
                            bc = fem.dirichletbc(
                                fem.Constant(self.mesh, float(T_boundary)),
                                boundary_dofs,
                                self.V
                            )
                            bcs.append(bc)
                            bcs_contornos += 1
                            
                except Exception as e:
                    if self.rank == 0:
                        print(f"   ‚ö†Ô∏è  Erro ao aplicar BC no contorno {boundary_id}: {e}")
            
            # 3. VERIFICA√á√ÉO FINAL: Garantir que TODOS os n√≥s t√™m BC (CORRE√á√ÉO DEFINITIVA)
            # Identificar n√≥s que ficaram sem BC
            todos_nos = set(range(self.mesh.topology.index_map(0).size_local))
            nos_com_bc = set(nos_inativos)  # N√≥s inativos j√° t√™m BC
            
            # Adicionar n√≥s dos contornos ativos
            for boundary_id in contornos_ativos:
                try:
                    facet_indices = np.where(self.facet_tags.values == boundary_id)[0]
                    if len(facet_indices) > 0:
                        boundary_dofs = locate_dofs_topological(self.V, self.mesh.topology.dim - 1, facet_indices)
                        nos_com_bc.update(boundary_dofs)
                except:
                    pass
            
            # N√≥s sem BC (√≥rf√£os reais)
            nos_sem_bc = list(todos_nos - nos_com_bc)
            
            if nos_sem_bc:
                if self.rank == 0:
                    print(f"   üö® CORRE√á√ÉO FINAL: {len(nos_sem_bc)} n√≥s √≥rf√£os detectados: {sorted(nos_sem_bc)}")
                
                # Aplicar BC nesses n√≥s √≥rf√£os tamb√©m
                for no_orfao in nos_sem_bc:
                    try:
                        dofs = np.array([no_orfao], dtype=np.int32)
                        bc = fem.dirichletbc(
                            fem.Constant(self.mesh, float(T_boundary)),
                            dofs,
                            self.V
                        )
                        bcs.append(bc)
                    except Exception as e:
                        if self.rank == 0:
                            print(f"   ‚ö†Ô∏è  Erro ao fixar n√≥ √≥rf√£o {no_orfao}: {e}")
                
                if self.rank == 0:
                    print(f"   ‚úÖ CORRE√á√ÉO FINAL: {len(nos_sem_bc)} n√≥s √≥rf√£os adicionais fixados")
            
            if self.rank == 0:
                print(f"   ‚úÖ CORRE√á√ÉO: {bcs_contornos} contornos ativos aplicados")
                print(f"   üéØ TOTAL FINAL: {len(bcs)} condi√ß√µes de contorno (cobertura completa)")
            
            return bcs
                
        except Exception as e:
            if self.rank == 0:
                print(f"   ‚ùå Erro nas condi√ß√µes de contorno: {e}")
            return self.apply_fallback_boundary_conditions()
    
    def apply_fallback_boundary_conditions(self):
        """Condi√ß√µes de contorno fallback - aplicar em toda a fronteira"""
        try:
            def boundary_marker(x):
                return np.ones(x.shape[1], dtype=bool)
            
            # Usar o espa√ßo correto baseado no tipo de sistema
            V_space = self.V  # Tanto sistema simples quanto exot√©rmico usam self.V
            
            boundary_dofs = locate_dofs_topological(V_space, self.mesh.topology.dim-1, 
                                                   mesh.locate_entities_boundary(self.mesh, self.mesh.topology.dim-1, boundary_marker))
            
            bc = fem.dirichletbc(fem.Constant(self.mesh, 20.0), boundary_dofs, V_space)
            
            if self.rank == 0:
                print(f"   ‚ö†Ô∏è  Usando BC fallback: {len(boundary_dofs)} DOFs")
            return [bc]
        except Exception as e:
            if self.rank == 0:
                print(f"   ‚ùå Erro no fallback: {e}")
            return []
    
    def solve_timestep(self, dt_val, current_time):
        """Resolver passo de tempo usando l√≥gica assertiva do JSON"""
        # Encontrar bloco ativo usando fun√ß√£o assertiva
        info_bloco_atual = self.encontrar_bloco_para_tempo_atual(current_time, self.plano_simulacao)
        
        if not info_bloco_atual:
            if self.rank == 0:
                print(f"   ‚ö†Ô∏è  Nenhum bloco ativo para t={current_time/3600:.1f}h")
            return
        
        if self.has_exothermic:
            # SISTEMA EXOT√âRMICO: Abordagem sequencial
            # 1. PRIMEIRO: Calcular tempo equivalente baseado na temperatura anterior
            self.update_equivalent_time(dt_val, current_time)
            
            # 2. SEGUNDO: Calcular Q usando o tempo equivalente
            self.calculate_heat_generation(current_time)
            
            # 3. TERCEIRO: Resolver equa√ß√£o de balan√ßo de energia com Q
            self.solve_energy_balance(dt_val, current_time)
            
        else:
            # SISTEMA SIMPLES: Apenas temperatura
            # Montar forma variacional usando l√≥gica assertiva
            form_result = self.setup_variational_form(dt_val, current_time)
            
            if form_result is None:
                if self.rank == 0:
                    print(f"   ‚ùå Falha na montagem da forma variacional")
                return
            
            # Aplicar condi√ß√µes de contorno usando l√≥gica assertiva
            boundary_conditions = self.get_boundary_conditions(current_time)
            
            a, L = form_result
            
            try:
                # Solver direto
                problem = LinearProblem(
                    a, L, bcs=boundary_conditions,
                    petsc_options={
                        "ksp_type": "preonly",
                        "pc_type": "lu",
                        "pc_factor_mat_solver_type": "mumps"
                    }
                )
                T_new = problem.solve()
                
                # Copiar solu√ß√£o
                self.T.x.array[:] = T_new.x.array[:]
                
                if self.rank == 0:
                    camadas_ativas = info_bloco_atual['camadas_ativas']
                    print(f"   ‚úÖ Convergiu (LU) - Camadas: {camadas_ativas}")
                    
            except Exception as e:
                # Fallback para solver iterativo
                try:
                    if self.rank == 0:
                        print(f"   ‚ö†Ô∏è  LU falhou, tentando solver iterativo...")
                    
                    problem = LinearProblem(
                        a, L, bcs=boundary_conditions,
                        petsc_options={
                            "ksp_type": "cg",
                            "pc_type": "hypre",
                            "ksp_rtol": 1.0e-8,
                            "ksp_max_it": 1000
                        }
                    )
                    T_new = problem.solve()
                    
                    # Copiar solu√ß√£o
                    self.T.x.array[:] = T_new.x.array[:]
                    
                    if self.rank == 0:
                        camadas_ativas = info_bloco_atual['camadas_ativas']
                        print(f"   ‚úÖ Convergiu (CG) - Camadas: {camadas_ativas}")
                        
                except Exception as e2:
                    if self.rank == 0:
                        print(f"   ‚ùå Erro no solver: {e2}")
                        print(f"   üîÑ Mantendo solu√ß√£o anterior")

    def update_equivalent_time(self, dt_val, current_time):
        """PASSO 1: Calcular tempo equivalente baseado na temperatura anterior"""
        try:
            # Usar temperatura do passo anterior (Tp_n)
            info_bloco_atual = self.encontrar_bloco_para_tempo_atual(current_time, self.plano_simulacao)
            dominios_ativos = info_bloco_atual['physical_groups']['surfaces']
            
            if self.rank == 0:
                print(f"   üîÑ Calculando tempo equivalente para {len(dominios_ativos)} dom√≠nios...")
            
            # Obter propriedades do material (usar primeiro material como padr√£o)
            material = list(self.materials.values())[0]
            
            # Calcular fator de Arrhenius baseado na temperatura anterior
            # Isso √© uma integral simples: teq(t+dt) = teq(t) + dt * f_arrhenius(Tp(t))
            
            # Interpola√ß√£o da temperatura anterior nos pontos de integra√ß√£o
            Tp_anterior = self.Tp_n.x.array[:]
            teq_anterior = self.teq_n.x.array[:]
            
            # Fator de Arrhenius usando temperatura anterior
            EaR = material['EaR']
            Tref = material['Tref']
            
            # Calcular incremento do tempo equivalente
            # Fator de Arrhenius: exp(EaR * (1/Tref - 1/Tp))
            expoente = EaR * (1/(Tref + 273.15) - 1/(Tp_anterior + 273.15))
            
            # Limitar apenas para evitar overflow num√©rico (n√£o f√≠sico)
            expoente_limitado = np.clip(expoente, -50.0, 50.0)
            
            arrhenius_factor = np.exp(expoente_limitado)
            teq_increment = dt_val * arrhenius_factor
            
            # Apenas garantir que incremento >= 0 (fisicamente necess√°rio)
            teq_increment = np.maximum(teq_increment, 0.0)
            
            # Atualizar tempo equivalente
            self.teq.x.array[:] = teq_anterior + teq_increment
            
            if self.rank == 0:
                teq_min = np.min(self.teq.x.array[:])
                teq_max = np.max(self.teq.x.array[:])
                print(f"   ‚úÖ Tempo equivalente atualizado: [{teq_min:.1f}, {teq_max:.1f}]s")
                
        except Exception as e:
            if self.rank == 0:
                print(f"   ‚ùå Erro no c√°lculo do tempo equivalente: {e}")
                print(f"   üîÑ Mantendo tempo equivalente anterior")
    
    def calculate_heat_generation(self, current_time):
        """PASSO 2: Calcular gera√ß√£o de calor Q baseada no tempo equivalente"""
        try:
            # Usar tempo equivalente calculado no passo anterior
            info_bloco_atual = self.encontrar_bloco_para_tempo_atual(current_time, self.plano_simulacao)
            dominios_ativos = info_bloco_atual['physical_groups']['surfaces']
            
            # Obter propriedades do material
            material = list(self.materials.values())[0]
            
            # Calcular Q usando fun√ß√£o Hill
            teq_values = self.teq.x.array[:]
            
            rho = material['densidade']
            ce = material['calor_especifico']
            dTadinfty = material['dTadinfty']
            a_dias = material['a_dias']
            expoente = material['expoente']
            
            # Converter a_dias para segundos
            a_sec = a_dias * 24 * 3600
            
            # Fun√ß√£o Hill CORRIGIDA - sem limita√ß√µes artificiais
            # Q(teq) = rho * ce * dTadinfty * teq^c / (a^c + teq^c)
            Q_values = rho * ce * (dTadinfty * teq_values**expoente / (a_sec**expoente + teq_values**expoente))
            
            # Apenas garantir que Q >= 0 (fisicamente necess√°rio)
            Q_values = np.maximum(Q_values, 0.0)
            
            # Armazenar Q na fun√ß√£o j√° criada
            self.Q_heat.x.array[:] = Q_values
            
            if self.rank == 0:
                Q_min = np.min(Q_values)
                Q_max = np.max(Q_values)
                print(f"   ‚úÖ Gera√ß√£o de calor calculada: [{Q_min:.1e}, {Q_max:.1e}] W/m¬≥")
                
        except Exception as e:
            if self.rank == 0:
                print(f"   ‚ùå Erro no c√°lculo da gera√ß√£o de calor: {e}")
                print(f"   üîÑ Usando Q = 0")
            self.Q_heat.x.array[:] = 0.0
    
    def solve_energy_balance(self, dt_val, current_time):
        """PASSO 3: Resolver equa√ß√£o de balan√ßo de energia com Q usando solver iterativo"""
        try:
            # Montar forma variacional com gera√ß√£o de calor
            form_result = self.setup_variational_form_with_heat_generation(dt_val, current_time)
            
            if form_result is None:
                if self.rank == 0:
                    print(f"   ‚ùå Falha na montagem da forma variacional com gera√ß√£o de calor")
                return
            
            a, L = form_result
            boundary_conditions = self.get_boundary_conditions(current_time)
            
            # SOLVER ITERATIVO: Usar GMRES com precondicionamento para problemas exot√©rmicos
            try:
                problem = LinearProblem(
                    a, L, bcs=boundary_conditions,
                    petsc_options={
                        "ksp_type": "gmres",
                        "pc_type": "ilu",
                        "ksp_rtol": 1e-6,
                        "ksp_atol": 1e-8,
                        "ksp_max_it": 1000
                    }
                )
                Tp_new = problem.solve()
                
                # Verificar se a solu√ß√£o √© v√°lida
                if not np.all(np.isfinite(Tp_new.x.array)):
                    raise RuntimeError("Solu√ß√£o GMRES divergente")
                
                # Se GMRES funcionou, usar
                self.Tp.x.array[:] = Tp_new.x.array[:]
                solver_usado = "GMRES"
                
            except Exception as e_gmres:
                if self.rank == 0:
                    print(f"   ‚ö†Ô∏è  GMRES falhou: {e_gmres}")
                    print(f"   üîÑ Tentando solver mais robusto (CG+ILU)...")
                
                # Fallback: Usar CG com ILU
                try:
                    problem_cg = LinearProblem(
                        a, L, bcs=boundary_conditions,
                        petsc_options={
                            "ksp_type": "cg",
                            "pc_type": "ilu",
                            "ksp_rtol": 1e-5,
                            "ksp_atol": 1e-7,
                            "ksp_max_it": 2000
                        }
                    )
                    Tp_new_cg = problem_cg.solve()
                    
                    # Verificar se a solu√ß√£o √© v√°lida
                    if not np.all(np.isfinite(Tp_new_cg.x.array)):
                        raise RuntimeError("Solu√ß√£o CG divergente")
                    
                    # Se CG funcionou, usar
                    self.Tp.x.array[:] = Tp_new_cg.x.array[:]
                    solver_usado = "CG"
                    
                except Exception as e_cg:
                    if self.rank == 0:
                        print(f"   ‚ö†Ô∏è  CG falhou: {e_cg}")
                        print(f"   üîÑ Tentando solver direto (LU)...")
                    
                    # √öltimo recurso: LU direto
                    problem_lu = LinearProblem(
                        a, L, bcs=boundary_conditions,
                        petsc_options={
                            "ksp_type": "preonly",
                            "pc_type": "lu",
                            "pc_factor_mat_solver_type": "mumps"
                        }
                    )
                    Tp_new_lu = problem_lu.solve()
                    
                    # Verificar se a solu√ß√£o √© v√°lida
                    if not np.all(np.isfinite(Tp_new_lu.x.array)):
                        raise RuntimeError("Solu√ß√£o LU divergente")
                    
                    # Se LU funcionou, usar
                    self.Tp.x.array[:] = Tp_new_lu.x.array[:]
                    solver_usado = "LU"
            
            if self.rank == 0:
                info_bloco_atual = self.encontrar_bloco_para_tempo_atual(current_time, self.plano_simulacao)
                camadas_ativas = info_bloco_atual['camadas_ativas']
                Tp_min = np.min(self.Tp.x.array[:])
                Tp_max = np.max(self.Tp.x.array[:])
                print(f"   ‚úÖ Convergiu ({solver_usado}) - Camadas: {camadas_ativas}")
                print(f"   üå°Ô∏è  Temperatura: [{Tp_min:.1f}, {Tp_max:.1f}]¬∞C")
                
        except Exception as e:
            if self.rank == 0:
                print(f"   ‚ùå Erro no solver de energia: {e}")
                print(f"   üîÑ Mantendo solu√ß√£o anterior (Tp n√£o ser√° atualizado)")
            # Importante: n√£o atualize Tp_n se a solu√ß√£o falhar
            # A atualiza√ß√£o ocorre fora deste m√©todo, no loop principal
    
    def run_simulation(self):
        """EXECUTA SIMULA√á√ÉO APENAS NO PRIMEIRO BLOCO DE TEMPO"""
        self.load_mesh_and_discover_tags()
        self.setup_materials_and_schedule()
        self.setup_function_spaces()
        
        # Condi√ß√µes iniciais
        if self.has_exothermic:
            # Sistema exot√©rmico: Tp = temp_inicial, teq = 0
            self.Tp_n.x.array[:] = self.temp_inicial
            self.Tp.x.array[:] = self.temp_inicial
            self.teq_n.x.array[:] = 0.0
            self.teq.x.array[:] = 0.0
            self.Q_heat.x.array[:] = 0.0  # Inicializar gera√ß√£o de calor
            
            if self.rank == 0:
                print(f"   ‚úÖ Condi√ß√µes iniciais exot√©rmicas: Tp={self.temp_inicial}¬∞C, teq=0s, Q=0")
        else:
            # Sistema simples: apenas temperatura
            self.T_n.x.array[:] = self.temp_inicial
            self.T.x.array[:] = self.temp_inicial
            
            if self.rank == 0:
                print(f"   ‚úÖ Condi√ß√µes iniciais simples: T={self.temp_inicial}¬∞C")
        
        # EXTRAIR APENAS PRIMEIRO BLOCO DE TEMPO
        primeiro_bloco = self.time_blocks[0]
        time_vector = self.time_vector
        
        # Filtrar vetor de tempo apenas para primeiro bloco
        primeiro_bloco_tempo = [t for t in time_vector if primeiro_bloco['inicio'] <= t <= primeiro_bloco['fim']]
        
        if self.rank == 0:
            print(f"\nüöÄ SIMULA√á√ÉO APENAS NO PRIMEIRO BLOCO DE TEMPO")
            print(f"   üìÖ Bloco 1: {primeiro_bloco['inicio']/3600:.1f}h ‚Üí {primeiro_bloco['fim']/3600:.1f}h")
            print(f"   üïí Dura√ß√£o: {primeiro_bloco['duracao']/3600:.1f}h")
            print(f"   üìä Pontos de tempo: {len(primeiro_bloco_tempo)}")
            print("="*60)
        
        # Criar diret√≥rio de sa√≠da
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Simular apenas para pontos de tempo do primeiro bloco
        for i in range(1, len(primeiro_bloco_tempo)):
            current_time = primeiro_bloco_tempo[i]
            previous_time = primeiro_bloco_tempo[i-1]
            dt_val = current_time - previous_time
            
            if self.rank == 0:
                print(f"\nüìÖ Passo {i}: t={previous_time/3600:.1f}h ‚Üí {current_time/3600:.1f}h (dt={dt_val/3600:.1f}h)")
            
            # Resolver usando l√≥gica assertiva
            self.solve_timestep(dt_val, current_time)
            
            # Atualizar solu√ß√µes
            if self.has_exothermic:
                # Sistema exot√©rmico: atualizar Tp_n <- Tp, teq_n <- teq
                self.Tp_n.x.array[:] = self.Tp.x.array[:]
                self.teq_n.x.array[:] = self.teq.x.array[:]
            else:
                # Sistema simples: atualizar T_n <- T
                self.T_n.x.array[:] = self.T.x.array[:]
            
            # Salvar resultados
            if i % 5 == 0:  # Salvar mais frequentemente no primeiro bloco
                self.save_results(i, current_time)
        
        if self.rank == 0:
            print(f"\n‚úÖ SIMULA√á√ÉO DO PRIMEIRO BLOCO CONCLU√çDA")
            print(f"   üìä Total: {len(primeiro_bloco_tempo)-1} passos")
            print(f"   üïí Tempo final: {primeiro_bloco_tempo[-1]/3600:.1f}h")
    
    def save_results(self, time_step, current_time):
        """Salva resultados"""
        try:
            if self.has_exothermic:
                # Sistema exot√©rmico: salvar Tp e teq
                output_file_tp = f"{self.output_dir}/temperatura_bloco1_{time_step:04d}.xdmf"
                output_file_teq = f"{self.output_dir}/tempo_equiv_bloco1_{time_step:04d}.xdmf"
                
                # Salvar temperatura
                with io.XDMFFile(self.comm, output_file_tp, "w") as xdmf:
                    self.Tp.name = "Temperatura"
                    xdmf.write_mesh(self.mesh)
                    xdmf.write_function(self.Tp, current_time)
                
                # Salvar tempo equivalente
                with io.XDMFFile(self.comm, output_file_teq, "w") as xdmf:
                    self.teq.name = "Tempo_Equivalente"
                    xdmf.write_mesh(self.mesh)
                    xdmf.write_function(self.teq, current_time)
                
                if self.rank == 0:
                    print(f"   üíæ Salvo: temperatura_bloco1_{time_step:04d}.xdmf + tempo_equiv_bloco1_{time_step:04d}.xdmf")
            else:
                # Sistema simples: salvar apenas temperatura
                output_file = f"{self.output_dir}/temperatura_bloco1_{time_step:04d}.xdmf"
                with io.XDMFFile(self.comm, output_file, "w") as xdmf:
                    self.T.name = "Temperatura"
                    xdmf.write_mesh(self.mesh)
                    xdmf.write_function(self.T, current_time)
                    
                if self.rank == 0:
                    print(f"   üíæ Salvo: temperatura_bloco1_{time_step:04d}.xdmf")
        except Exception as e:
            if self.rank == 0:
                print(f"   ‚ö†Ô∏è  Erro ao salvar: {e}")

def main():
    """Executa simula√ß√£o apenas no primeiro bloco usando an√°lise JSON"""
    config_file = "barragem1.yaml"
    json_file = "analise_stagewise_xdmf.json"
    
    # Configurar logging para arquivo
    log_output = TeeOutput("log.md")
    sys.stdout = log_output
    
    try:
        if not os.path.exists(config_file):
            print(f"‚ùå Arquivo {config_file} n√£o encontrado!")
            sys.exit(1)
        
        if not os.path.exists(json_file):
            print(f"‚ùå Arquivo {json_file} n√£o encontrado!")
            print(f"üìù Execute primeiro: python debug_camadas.py")
            sys.exit(1)
        
        try:
            solver = BarragemStageWiseCorreto(config_file, json_file)
            solver.run_simulation()
            
            print(f"\nüéØ SIMULA√á√ÉO PRIMEIRO BLOCO CONCLU√çDA")
            print(f"üìù Melhorias implementadas:")
            print(f"   ‚úÖ L√≥gica assertiva usando JSON")
            print(f"   ‚úÖ Formula√ß√£o variacional apenas para dom√≠nios ativos")
            print(f"   ‚úÖ Condi√ß√µes de contorno apenas para contornos ativos")
            print(f"   ‚úÖ Execu√ß√£o apenas no primeiro bloco de tempo")
            print(f"   ‚úÖ Fun√ß√£o encontrar_bloco_para_tempo_atual implementada")
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            import traceback
            traceback.print_exc()
    
    finally:
        # Sempre fechar o arquivo de log
        log_output.close()
        print(f"\nüìù Log salvo em: log.md")

if __name__ == "__main__":
    main()
